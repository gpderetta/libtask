# this is a -*-makefile-*-

.PHONY: clean all test run-test
all: $(PROGRAMS) $(TESTS) $(LIBRARIES) $(STATIC_LIBRARIES)

OBJ_DIR=objs
DEP_DIR=deps
TST_DIR=tests
BIN_DIR=bin
LIB_DIR=libs
TEST_BIN:=$(addprefix $(BIN_DIR)/,$(TESTS))
PROGRAM_BIN:=$(addprefix $(BIN_DIR)/,$(PROGRAMS))

#SUPPRESS?=1

ifeq ($(TERM),dumb) 
msg_header="[%s] %-30s"
msg_fail="[%s]\n"
msg_pass="[%s]\n"
else
msg_header="[\033[01;33m%s\033[00m] %-30s"
msg_fail="[\033[01;31m%s\033[00m]\n"
msg_pass="[\033[01;32m%s\033[00m]\n"
endif


define TEST_template
$(2)_OBJS=$(OBJ_DIR)/$(1).o
$(2)_DEPS=$(DEP_DIR)/$(1).d

$$($(2)_OBJS): $(OBJ_DIR)/%.o: $(TST_DIR)/%.cpp
$$($(2)_DEPS): $(DEP_DIR)/%.d: $(TST_DIR)/%.cpp

$(BIN_DIR)/$(1): LDFLAGS+=-L$(LIB_DIR) $$($(2)_LIBS:%=-l%) 
$(BIN_DIR)/$(1): $(filter $(STATIC_LIBRARIES:%=$(LIB_DIR)/%.a),$($(2)_LIBS:%=$(LIB_DIR)/lib%.a))
$(BIN_DIR)/$(1): $$($(2)_OBJS)

ALL_OBJS += $$($(2)_OBJS)
ALL_DEPS += $$($(2)_DEPS)
endef

define PROGRAM_template
ifndef $(2)_SOURCES
	$(2)_OBJS=$(OBJ_DIR)/$(1).o
	$(2)_DEPS=$(DEP_DIR)/$(1).d
else
	$(2)_OBJS=$($(2)_SOURCES:%.cpp=$(OBJ_DIR)/%.o) 
	$(2)_DEPS=$($(2)_SOURCES:%.cpp=$(DEP_DIR)/%.d) 
endif

$$($(2)_OBJS): $(OBJ_DIR)/%.o: %.cpp
$$($(2)_DEPS): $(DEP_DIR)/%.d: %.cpp
$(BIN_DIR)/$(1): $$($(2)_OBJS)
$(BIN_DIR)/$(1): $(filter $(STATIC_LIBRARIES),$($(2)_LIBS:%=lib%))
$(BIN_DIR)/$(1): LDFLAGS+=-L$(LIB_DIR) $$($(2)_LIBS:%=-l%) 
ALL_OBJS += $$($(2)_OBJS)
ALL_DEPS += $$($(2)_DEPS)
endef

define LIBRARY_template
$(2)_OBJS=$($(2)_SOURCES:%.cpp=$(OBJ_DIR)/%.o)
$(2)_DEPS=$($(2)_SOURCES:%.cpp=$(DEP_DIR)/%.d)

$$($(2)_OBJS): $(OBJ_DIR)/%.o: %.cpp
$$($(2)_DEPS): $(DEP_DIR)/%.d: %.cpp

$(LIB_DIR)/$(1:%=%.so): CXXFLAGS += -fPIC
$(LIB_DIR)/$(1:%=%.so): LDFLAGS+=$$($(2)_LIBS:%=-l%)
$(LIB_DIR)/$(1:%=%.so): $$($(2)_OBJS)
ALL_OBJS += $$($(2)_OBJS)
ALL_DEPS += $$($(2)_DEPS)
endef

define STATIC_LIBRARY_template
$(2)_OBJS=$($(2)_SOURCES:%.cpp=$(OBJ_DIR)/%.o)
$(2)_DEPS=$($(2)_SOURCES:%.cpp=$(DEP_DIR)/%.d)

$$($(2)_OBJS): $(OBJ_DIR)/%.o: %.cpp
$$($(2)_DEPS): $(DEP_DIR)/%.d: %.cpp

$(LIB_DIR)/$(1:%=%.a): CPPFLAGS +=
$(LIB_DIR)/$(1:%=%.a): LDFLAGS+=$$($(2)_LIBS:%=-l%)
$(LIB_DIR)/$(1:%=%.a): $$($(2)_OBJS)
ALL_OBJS += $$($(2)_OBJS)
ALL_DEPS += $$($(2)_DEPS)
endef


$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog),$(subst -,_,$(prog)))))

$(foreach test,$(TESTS),$(eval $(call TEST_template,$(test),$(subst -,_,$(test)))))


$(foreach lib,$(LIBRARIES),$(eval $(call LIBRARY_template,$(lib),$(subst -,_,$(lib)))))


$(foreach lib,$(STATIC_LIBRARIES),$(eval $(call STATIC_LIBRARY_template,$(lib),$(subst -,_,$(lib)))))


setup-dirs: $(BIN_DIR) $(DEP_DIR) $(OBJ_DIR) $(LIB_DIR)
	@[ -e $(BIN_DIR) ] || mkdir $(BIN_DIR);\
	[ -e $(DEP_DIR) ] || mkdir $(DEP_DIR);\
	[ -e $(OBJ_DIR) ] || mkdir $(OBJ_DIR);\
	[ -e $(LIB_DIR) ] || mkdir $(LIB_DIR);\

$(BIN_DIR)/%:
	@printf $(msg_header) LK $@; \
	mkdir -p $(BIN_DIR); \
	cmd="$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $(filter %.o,$^) $(LDFLAGS) "; \
	test $(SUPPRESS) -eq 1  || echo $$cmd ; \
	if $$cmd   ; then \
		printf $(msg_pass) OK ;\
		exit 0;\
	else 	\
		printf $(msg_fail) FAIL  ;\
		exit 1;\
	fi ; \

.PHONY:
$(PROGRAMS):%: setup-dirs $(BIN_DIR)/% ;

.PHONY:
$(TESTS):%: setup-dirs $(BIN_DIR)/% ;

$(LIBRARIES:%=$(LIB_DIR)/%.so):
	@printf $(msg_header) LK $@; \
	cmd="$(CXX) -shared $(CPPFLAGS) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)" ; \
	test $(SUPPRESS) -eq 1  || echo $$cmd ; \
	if $$cmd   ; then \
		printf $(msg_pass) OK ;\
		exit 0;\
	else 	\
		printf $(msg_fail) FAIL  ;\
		exit 1;\
	fi ; \

.PHONY:
$(LIBRARIES):%: setup-dirs $(LIB_DIR)/%.so ;

$(STATIC_LIBRARIES:%=$(LIB_DIR)/%.a):
	@printf $(msg_header) AR $@; \
	cmd="ar rcs  $@ $^";\
	test $(SUPPRESS) -eq 1  || echo $$cmd ; \
	if $$cmd   ; then \
		printf $(msg_pass) OK ;\
		exit 0;\
	else 	\
		printf $(msg_fail) FAIL  ;\
		exit 1;\
	fi ; \

.PHONY:
$(STATIC_LIBRARIES):%:setup-dirs $(LIB_DIR)/%.a ;

%.d:
	@printf $(msg_header) DP $@; \
	cmd="$(CXX) $(CPPFLAGS) $(CXXFLAGS) -MM -MF  $@ $< "; \
	test $(SUPPRESS) -eq 1  || echo $$cmd ; \
	$$cmd ; \
	perl -pi -e 's{^(.*?)\.o[ :]+}{$(OBJ_DIR)/$$1.o $$1.d :}g' $@ ; \
	if [ $$? -eq 0 ]  ; then \
		printf $(msg_pass) OK ;\
		exit 0;\
	else 	\
		printf $(msg_fail) FAIL  ;\
		exit 1;\
	fi ; \

%.o:
	@printf $(msg_header) CC $@; \
	cmd="$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) -o $@ $< "; \
	test $(SUPPRESS) -eq 1  || echo $$cmd ; \
	if $$cmd   ; then \
		printf $(msg_pass) OK ;\
		exit 0;\
	else 	\
		printf $(msg_fail) FAIL  ;\
		exit 1;\
	fi ; \

clean:
	@echo Cleaning... ; \
	rm -f $(ALL_OBJS) \
	rm -f $(ALL_DEPS) \
	rm -f $(PROGRAM_BIN) \
	rm -f $(TEST_BIN) \
	rm -f $(STATIC_LIBRARIES:%=$(LIB_DIR)/%.a) \
	rm -f $(LIBRARIES:%=$(LIB_DIR)/%.so)		

.PHONY:
test : setup-dirs $(TEST_BIN)


.PHONY:
run-%-test: %_test
	@test=$(BIN_DIR)/$< ;	\
    printf $(msg_header) TT $$test ; \
	if $$test > /dev/null   ; then \
		printf $(msg_pass) PASS ;\
		exit 0;\
	else 	\
		printf $(msg_fail) FAIL  ;\
		exit 1;\
	fi ; \

.PHONY:
run-test: $(foreach test,$(TESTS),$(test:%_test=run-%-test))

ifneq "$(MAKECMDGOALS)" "clean"
  -include $(ALL_DEPS)
endif
